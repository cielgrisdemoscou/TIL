(window.webpackJsonp=window.webpackJsonp||[]).push([[66],{430:function(t,s,e){"use strict";e.r(s);var a=e(42),n=Object(a.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"basics-of-unit-testing"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#basics-of-unit-testing"}},[t._v("#")]),t._v(" Basics of Unit Testing")]),t._v(" "),e("p",[t._v("A Unit test is very small function that you write to test some part of your code.(Unit tests are automated tests that run and validate a piece of code (known as the “unit”) to make sure it behaves as intended and meets its design.)")]),t._v(" "),e("p",[t._v("Unit tests have their own target in Xcode and are written using the XCTest framework. A subclass of XCTestCase contains test methods to run in which only the methods starting with “test” will be parsed by Xcode and available to run.")]),t._v(" "),e("p",[t._v("Unit Test - Testing isolated small pieces of code with Fake or Mock dependencies")]),t._v(" "),e("p",[t._v("Integration Test - App code is tested without faking database or HTTP connections")]),t._v(" "),e("p",[t._v("UI Test - Automated tests to test User Interface Interaction and Behavior")]),t._v(" "),e("div",{staticClass:"language-swift extra-class"},[e("pre",{pre:!0,attrs:{class:"language-swift"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/// A simple struct containing a list of users.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("UsersViewModel")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" users"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("String")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" hasUsers"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Bool")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("users"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("isEmpty")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/// A test case to validate our logic inside the `UsersViewModel`.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UsersViewModelTests")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("XCTestCase")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/// It should correctly reflect whether it has users.")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("testHasUsers")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" viewModel "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("UsersViewModel")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("users"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Antoine"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Jaap"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Lady"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("XCTAssertTrue")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("viewModel"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("hasUsers"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("h2",{attrs:{id:"the-test-driven-development-life-cycle"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#the-test-driven-development-life-cycle"}},[t._v("#")]),t._v(" The Test-Driven Development Life Cycle")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("Red: Write Unit test that fails")])]),t._v(" "),e("li",[e("p",[t._v("Green: Write App code to make Unit test pass")])]),t._v(" "),e("li",[e("p",[t._v("Refactor: Clean up and Imporve Unit test and app code")])]),t._v(" "),e("li",[e("p",[t._v("Repeat: Repeat these steps until all your app features are built and tested")])])]),t._v(" "),e("h2",{attrs:{id:"unit-test-best-practices"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#unit-test-best-practices"}},[t._v("#")]),t._v(" Unit Test Best Practices")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("Fast: Unit tests run fast")])]),t._v(" "),e("li",[e("p",[t._v("Independent: Unit tests are independent")])]),t._v(" "),e("li",[e("p",[t._v("Repeatable: Unit tests are repeatable")])]),t._v(" "),e("li",[e("p",[t._v("Self-Validating: Unit test validates itself")])]),t._v(" "),e("li",[e("p",[t._v("Thorough & Timely: Cover edge cases")])]),t._v(" "),e("li",[e("p",[t._v("We should not try to make our unit test test mulitple functions in the single unit test method.")])]),t._v(" "),e("li",[e("p",[t._v("Our test code is just as important as our application code")])]),t._v(" "),e("li",[e("p",[t._v("Although it’s a target for plenty, 100% coverage should not be your main goal when writing tests. Make sure to test at least your most important business logic at first as this is already a great start. Reaching 100% can be quite time consuming while the benefits are not always that big. In fact, it might take a lot of effort to even reach 100%.")])]),t._v(" "),e("li",[e("p",[t._v("Write a test before fixing a bug")])])]),t._v(" "),e("h2",{attrs:{id:"references"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#references"}},[t._v("#")]),t._v(" References")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://www.raywenderlich.com/21020457-ios-unit-testing-and-ui-testing-tutorial",target:"_blank",rel:"noopener noreferrer"}},[t._v("iOS Unit Testing and UI Testing Tutorial"),e("OutboundLink")],1)])])}),[],!1,null,null,null);s.default=n.exports}}]);